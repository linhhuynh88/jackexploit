package org.example

import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.module.scala.DefaultScalaModule
import com.fasterxml.jackson.module.scala.experimental.ScalaObjectMapper

import java.io.{FileInputStream, FileOutputStream, ObjectInputStream, ObjectOutputStream}
import java.nio.file.{Files, Path, Paths}

/**
 * Hello world!
 *
 */
object App {
  def main(args: Array[String]): Unit = {
    println( "Hello World!" )
    val om = new ObjectMapper()
    om.registerModule(DefaultScalaModule)
    om.enableDefaultTyping()
    val myvalue = om.readValue(Files.readAllBytes(Paths.get(args(0))),classOf[Object])
    println(s"${myvalue}")

  }

//  def main(args: Array[String]): Unit = {
//    val exploit = new Exploit()
//    val output = new FileOutputStream("mal1.cer")
//    val outObj = new ObjectOutputStream(output)
//    outObj.writeObject(exploit)
//    outObj.close()
//    output.close()
//  }

//  def main(args: Array[String]): Unit = {
////    Runtime.getRuntime.exec("open /Applications/Safari.app")
//    val deser = new FileInputStream("malicious1.ser")
//    val inputObj = new ObjectInputStream(deser)
//    val e = inputObj.readObject().asInstanceOf[String]
//    inputObj.close()
//    deser.close()
//  }

}
